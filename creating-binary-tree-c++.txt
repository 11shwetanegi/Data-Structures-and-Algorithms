/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

class TreeNode
{   
    public:
    TreeNode *lchild;
    int data;
    TreeNode *rchild;
    void tree_create();
};

class Node
{
    public:
    TreeNode *data;
    Node *next;
};

class Tree
{
    public:
    TreeNode *root;
    Tree(){root=NULL;}
    void CreateTree();
    void PreOrder(TreeNode *p);
    void InOrder(TreeNode *p);
    void PostOrder(TreeNode *p);
    //void LevelOrder(TreeNode *p);
};

class Queue
{
    private:
    Node *front;
    Node *rear;
    
    public:
    Queue(){front=NULL;rear=NULL;}
    void Enqueue(TreeNode * x);
    TreeNode * Dequeue();
    void Display();
    int isEmpty();
};

void Queue::Enqueue(TreeNode * x)
{
    Node *t;
    t = new Node;
    
    if(t == NULL)
        cout<<"Queue is full\n";
    else
    {
        t->data = x;
        t->next = NULL;
        
        if(front == NULL)
        {
            front=rear=t;
        }
        else
        {   
            rear->next = t;
            rear = t;
        }
    }
}

TreeNode * Queue::Dequeue()
{
    TreeNode * x = NULL;
    
    if(front==NULL && rear==NULL)
        cout<<"Queue is empty\n";
    else
    {
        Node *p;
        p = front;
        front = front->next;
        x = p->data;
        free(p);
    }
    return x;
}

void Queue::Display()
{
    Node *p;
    p = front;
    
    if(front==NULL && rear==NULL)
        cout<<"Queue is empty\n";
    else
    {
        while(p!=NULL)
        {
            cout<<p->data<<" ";
            p=p->next;
        }
        cout<<"\n";
    }
}

int Queue::isEmpty()
{
    return front==NULL;
}


void Tree::PreOrder(TreeNode *p)
{
    if(p!=NULL)
    {
        printf("%d ", p->data);
        PreOrder(p->lchild);
        PreOrder(p->rchild);
    }
}

void Tree::InOrder(TreeNode *p)
{
    if(p!=NULL)
    {
        InOrder(p->lchild);
        printf("%d ", p->data);
        InOrder(p->rchild);
    }
}

void Tree::PostOrder(TreeNode *p)
{
    if(p!=NULL)
    {
        PostOrder(p->lchild);
        PostOrder(p->rchild);
        printf("%d ", p->data);
    }
}

void Tree::CreateTree()
{
    TreeNode *p, *t;
    int x;
    Queue q;
    
    cout<<"Enter root value: ";
    cin>>x;
    root = new TreeNode;
    root->data = x;
    root->lchild = root->rchild = NULL;
    q.Enqueue(root);
    
    while(!q.isEmpty())
    {
        
        p=q.Dequeue();
        cout<<"Enter Left Child of "<<p->data<<": ";
        cin>>x;
        if(x!=-1)
        { 
            t = new TreeNode;
            t->data = x;
            t->lchild = t->rchild = NULL;
            p->lchild = t;
            q.Enqueue(t);
        }
        
        cout<<"Enter Right Child of "<<p->data<<": ";
        cin>>x;
        if(x!=-1)
        {
            t = new TreeNode;
            t->data = x;
            t->lchild = t->rchild = NULL;
            p->rchild = t;
            q.Enqueue(t);
        }
    }
}

int main()
{
    Tree t;
    t.CreateTree();
    cout<<"PreOrder: ";
    t.PreOrder(t.root);
    cout<<endl;
    cout<<"InOrder: ";
    //t.InOrder(t.root);
    cout<<endl;
    cout<<"InOrder: ";
    //t.PostOrder(t.root);
    cout<<endl;
    
    return 0;
}
