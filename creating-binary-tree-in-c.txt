#include <iostream>

using namespace std;

struct Node
{
    struct Node *lchild;
    int data;
    struct Node *rchild;
}*root = NULL;

struct Queue
{
    int size;
    int front;
    int rear;
    Node **Q;
};

void create(struct Queue *q, int size)
{
    q->size = size;
    q->front = q->rear = -1;
    q->Q = (Node **)malloc(q->size*sizeof(Node *));
    //cout<<"Queue of size "<<q->size<<" is created\n";
}

int isEmpty(struct Queue q)
{
    return q.front == q.rear;
}

void enqueue(struct Queue *q, Node * x)
{
    if(q->rear==q->size-1)
        cout<<"Queue is full\n";
    else
    {
        q->rear++;
        q->Q[q->rear] = x;
        //cout<<x<<" inserted\n";
    }
}

Node * dequeue(struct Queue *q)
{
    Node* x = NULL;
    if(q->front == q->rear)
        cout<<"Queue is empty\n";
    else
    {
        q->front++;
        x = q->Q[q->front];
        //cout<<x<<" deleted\n";
    }
    return x;
}

void tree_create()
{
    struct Node *p, *t;
    int x;
    struct Queue q;
    create(&q, 100);
    
    cout<<"Enter root value: ";
    cin>>x;
    root = (struct Node *)malloc(sizeof(struct Node));
    root->data = x;
    root->lchild = root->rchild = NULL;
    enqueue(&q, root);
    
    while(!isEmpty(q))
    {
        p=dequeue(&q);
        cout<<"Enter Left Child of "<<p->data<<": ";
        cin>>x;
        if(x!=-1)
        {
            t = (struct Node *)malloc(sizeof(struct Node));
            t->data = x;
            t->lchild = t->rchild = NULL;
            p->lchild = t;
            enqueue(&q, t);
        }
        
        cout<<"Enter Right Child of "<<p->data<<": ";
        cin>>x;
        if(x!=-1)
        {
            t = (struct Node *)malloc(sizeof(struct Node));
            t->data = x;
            t->lchild = t->rchild = NULL;
            p->rchild = t;
            enqueue(&q, t);
        }
    }
}

void preorder(struct Node *p)
{
    if(p!=NULL)
    {
        printf("%d ", p->data);
        preorder(p->lchild);
        preorder(p->rchild);
    }
}

void inorder(struct Node *p)
{
    if(p!=NULL)
    {
        inorder(p->lchild);
        printf("%d ", p->data);
        inorder(p->rchild);
    }
}

void postorder(struct Node *p)
{
    if(p!=NULL)
    {
        postorder(p->lchild);
        postorder(p->rchild);
        printf("%d ", p->data);
    }
}

int main()
{
    tree_create();
    
    cout<<"Preorder: ";
    preorder(root);
    
    cout<<"\nInorder: ";
    inorder(root);
    
    cout<<"\nPostorder: ";
    postorder(root);

    return 0;
}
