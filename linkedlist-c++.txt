/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

class Node
{
    public:
    int data;
    Node *next;
};

class LinkedList
{
    private:
    Node *first;
    
    public:
    LinkedList(){first = NULL;}
    LinkedList(int A[], int n);
    ~LinkedList();
    
    void Display();
    void Insert(int index, int x);
    void Delete(int index);
    int Count();
};

LinkedList::LinkedList(int A[], int n)
{
    int i;
    struct Node *t, *last;
    first=(struct Node *)malloc(sizeof(struct Node));
    first->data = A[0];
    first->next = NULL;
    last = first;
    
    for(i=1;i<n;i++)
    {
        t=(struct Node *)malloc(sizeof(struct Node));
        t->data=A[i];
        t->next=NULL;
        last->next=t;
        last=t;
    }
    cout<<"Linked List Created\n";
}

LinkedList::~LinkedList()
{
    Node *p = first;
    while(first!=NULL)
    {
        first = first->next;
        delete p;
        p = first;
    }
}

void LinkedList::Display()
{
    Node *p = first;
    while(p!=NULL)
    {
        cout<<p->data<<" ";
        p = p->next;
    }
    cout<<"\n";
}

int LinkedList::Count()
{
    Node *p = first;
    int count = 0;
    while(p!=NULL)
    {
        p = p->next;
        count++;
    }
    return count;
}

void LinkedList::Insert(int index, int x)
{
    Node *p = first;
    
    Node *t;
    t = new Node;
    t->data=x;
    t->next = NULL;
    
    
    if(index == 0)
    {
        t->next = first;
        first = t;
    }
    else
    {
        if(index<=Count() && index>0)
        {
            for(int i=0; i<index-1;i++)
                p = p->next;
            t->next = p->next;
            p->next = t;
        }
        
        else
            cout<<"Invalid Index\n";
    }
    
}

void LinkedList::Delete(int index)
{
    Node *q = NULL, *p = first;
    
    if(index<0 || index>=Count())
    {
        cout<<"Invalid Index\n";
        return;
    }
    
    if(index == 0)
    {
        first = p->next;
        delete p;
    }
    else
    {
        for(int i=0; i<index-1; i++)
            p = p->next;
        q = p->next;
        p->next = p->next->next;
        delete q;
    }
}

int main()
{
    int A[5] = {2,5,6,7,8};
    int n = 5;
    
    LinkedList l(A, n);
    l.Display();
    l.Insert(2, 9);
    l.Display();
    l.Insert(0, 1);
    l.Display();
    l.Insert(7, 11);
    l.Display();
    l.Delete(0);
    l.Display();
    l.Delete(6);
    l.Display();
    l.Delete(1);
    l.Display();
    
    
    return 0;
}
