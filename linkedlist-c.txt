/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

0 1 2 3 4 5

3 5 7 10 15

*******************************************************************************/

#include <iostream>

using namespace std;

struct Node
{
    int data;
    struct Node *next;
}*first = NULL;

void Create(int A[], int n)
{
    int i;
    struct Node *t, *last;
    first=(struct Node *)malloc(sizeof(struct Node));
    first->data = A[0];
    first->next = NULL;
    last = first;
    
    for(i=1;i<n;i++)
    {
        t=(struct Node *)malloc(sizeof(struct Node));
        t->data=A[i];
        t->next=NULL;
        last->next=t;
        last=t;
    }
    cout<<"Linked List Created\n";
}

void Display(struct Node *p)
{
    while(p!=NULL)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
    cout<<"\n";
}

void RecursiveDisplay(struct Node *p)
{
    if(p!=NULL)
    {
        cout<<p->data<<" ";
        RecursiveDisplay(p->next);
    }
}

void RecursiveReverseDisplay(struct Node *p)
{
    if(p!=NULL)
    {
        RecursiveReverseDisplay(p->next);
        cout<<p->data<<" ";
    }
}

int Count(struct Node *p)
{
    int count=0;
    
    while(p!=NULL)
    {
        p=p->next;
        count++;
    }
    return count;
}

void Insert(struct Node *p, int index, int x)
{
    struct Node *t;
    
    if(index<0 || index>Count(p))
    {
        cout<<"Invalid Index\n";
        return;
    }

        
    t=(struct Node *)malloc(sizeof(struct Node));
    t->data = x;
    t->next = NULL;
    
    if(index==0)
    {
        t->next = first;
        first = t;
    }
    else
    {
        for(int i=0; i<index-1; i++)
            p=p->next;
        
        t->next=p->next;
        p->next=t;
    }
    
}

void CreateUsingInsert(int x)
{
    struct Node *t, *last;
    
    t=(struct Node *)malloc(sizeof(struct Node));
    t->data = x;
    t->next = NULL;
    
    if(first == NULL)
    {
        first=t;
        last=first;
    }
    else
    {
        last->next = t;
        last = t;
    }
}

void SortedInsert(struct Node *p, int x)
{
    struct Node *t, *q=NULL;
    t = (struct Node *)malloc(sizeof(struct Node));
    t->data = x;
    t->next = NULL;
    
    if(p==NULL)
    {
        first=t;
    }
    else
    {
        if(p!=NULL && p->data>x)
        {
            t->next = p;
            first = t;
        }
        else
        {
            while(p!=NULL && p->data<x)
            {
                q = p;
                p = p->next;
            }
            t->next = p;
            q->next = t;
        }
    }
}

void SortedInsertUsingOnePointer(struct Node *p, int x)
{
    struct Node *t;
    t = (struct Node *)malloc(sizeof(struct Node));
    t->data = x;
    t->next = NULL;
    
    if(p==NULL)
    {
        first=t;
    }
    
    else if(p->data>x)
    {
        t->next = p;
        first = t;
    }
    else
    {
        while(p->next!=NULL && p->next->data<x)
        {
            p = p->next;
        }
        t->next = p->next;
        p->next = t;
    }
}

void DeleteANode(struct Node *p, int index)
{
    struct Node *q=NULL;
    
    if(index<0 || index>Count(p)-1)
    {
        cout<<"Invalid Index\n";
        return;
    }
        
    if(index==0)
    {
        first=first->next;
        delete p;
    }
    else
    {
        for(int i=0; i<index; i++)
        {
            q = p;
            p = p->next;
        }
        q->next = p->next;
        delete p;
    }
}

void Reverse(struct Node *p)
{
    int *A, i;
    
    A=(int *)malloc(sizeof(Count(p)));
    
    while(p!=NULL)
    {
        A[i] = p->data;
        p = p->next;
        i++;
    }
    
    p=first;
    i--;
    
    while(p!=NULL)
    {
        p->data =  A[i];
        p=p->next;
        i--;
    }
}

void ReverseUsingLinks(struct Node *p)
{
    struct Node *q=NULL, *r=NULL;
    while(p!=NULL)
    {
        r=q;
        q=p;
        p=p->next;
        q->next = r;
    }
    first=q;
}

void RecursiveReverse(struct Node *q, struct Node *p)
{
    if(p==NULL)
    {
        first=q;
        return;
    }
    else
    {
        RecursiveReverse(p, p->next);
        p->next = q;
    }
}

void CheckLoop(struct Node *p)
{
    struct Node *q=first;
    do
    {
        if(p!=NULL && q!=NULL)
        {
            p=p->next;
            q=q->next;
            if(q!=NULL)
                q=q->next;
            else
                break;
        }
    }while(p!=q);
    
    if(p==q)
        cout<<"Loop exists";
    else
        cout<<"Loop doesn't exist";
}

int main()
{
    struct Node *t1,*t2;
    
    int A[]={3,5,7,10,15};
    
    Create(A, 5);
    
    //Display(first);
    
    //RecursiveDisplay(first);
    
    //RecursiveReverseDisplay(first);
    
    //cout<<Count(first);
    
    //Insert(first, 0, 23);
    
    //Display(first);
    
    //CreateUsingInsert(8);
    //CreateUsingInsert(4);
    //CreateUsingInsert(5);
    //CreateUsingInsert(3);
    Display(first);
    
    //SortedInsert(first, 6);
    //DeleteANode(first, 4);
    
    //Reverse(first);
    //ReverseUsingLinks(first);
    
    //RecursiveReverse(NULL, first);
    //Display(first);
    
    //forming a loop
    t1=first->next->next;
    t2=first->next->next->next->next;
    t2->next = t1;
    
    CheckLoop(first);
    
    
    return 0;
}
