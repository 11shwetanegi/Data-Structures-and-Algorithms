'''

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

'''
class Node: 
    def __init__(self, data):
        self.data = data
        self.nextNode = None

class LinkedList:
    def __init__(self):
        self.head = None
        self.numOfNodes = 0
        
    def insert_start(self, data):
        self.numOfNodes = self.numOfNodes + 1 
        newNode = Node(data)
        
        if not self.head:
            self.head = newNode
        else:
            newNode.nextNode = self.head
            self.head = newNode
    
    def insert_end(self, data):
        self.numOfNodes = self.numOfNodes + 1 
        newNode = Node(data)
        
        actualNode = self.head
        
        while actualNode.nextNode is not None:
            actualNode = actualNode.nextNode
            
        actualNode.nextNode = newNode
        
    def traverse(self):
        actualNode = self.head
        
        while actualNode is not None:
            print(str(actualNode.data) + " ")
            actualNode = actualNode.nextNode
            
    #position starts from 1
    def insert_at_position(self, position, data):
        newNode = Node(data)
        
        # LL is empty and insertion at position 1
        if self.head is None and position == 1:
            self.numOfNodes = self.numOfNodes + 1 
            self.head = newNode
            print("LL was empty Node Inserted at position 1")
            return
            
        # invalid position
        if position > self.numOfNodes+1 or position<0:
            print("Invalid position")
            return
        
        # insertion at postion 1 when LL is not empty
        if position ==1:
            self.numOfNodes = self.numOfNodes + 1 
            newNode.nextNode = self.head
            self.head = newNode
            print("Node Inserted at position 1")
            return
            
        actualNode = self.head
        previousNode = None
        
        # insertion at given position
        for i in range(1, position):
            previousNode = actualNode
            actualNode = actualNode.nextNode
            
        # print("Prev: " + str(previousNode.data))
        # print("Actual: " + str(actualNode.data))
        
        self.numOfNodes = self.numOfNodes + 1
        newNode.nextNode = actualNode
        previousNode.nextNode = newNode
        print("Node Inserted at given position")
    
    def remove(self, data):
        
        # if the LL is empty
        if self.head is None:
            print("LL is empty")
            return
        
        actualNode = self.head
        previousNode = None
        
         # if data is present on head Node
        if actualNode.data == data:
            self.head = actualNode.nextNode
            return
    
        #going to the node which has data
        while actualNode is not None and actualNode.data != data:
            previousNode = actualNode
            actualNode = actualNode.nextNode
            
        # if the data is not present in the LL
        if actualNode is None:
            print("Value not found")
            return
        else:
            previousNode.nextNode = actualNode.nextNode

    def delete(self, position):
        
        # if LL is empty
        if self.head is None:
            print("LL is empty")
            return
        
        actualNode = self.head
        previousNode = None
        
        # delete at position 1
        if position == 1:
            self.numOfNodes = self.numOfNodes - 1
            actualNode = actualNode.nextNode
            self.head = actualNode
            print("Node deleted")
            return
        
        # deleting at given position
        for i in range(1, position):
            previousNode = actualNode
            actualNode = actualNode.nextNode
        
        previousNode.nextNode = actualNode.nextNode
        self.numOfNodes = self.numOfNodes - 1 
        print("Node deleted")
        
    def get_middle_element(self):
        
        fastPointer = self.head
        slowPointer = self.head
        
        while fastPointer.nextNode and fastPointer.nextNode.nextNode:
            fastPointer = fastPointer.nextNode.nextNode
            slowPointer = slowPointer.nextNode
        
        return slowPointer.data
        
    def reverse_linkedlist(self):
        
        if not self.head:
            print("LL is Empty")
            return
        
        previousNode = None
        currentNode = self.head
        nextNode = currentNode.nextNode
        
        while currentNode:
            
            if nextNode is None:
                currentNode.nextNode = previousNode
                self.head = currentNode
                return
            
            currentNode.nextNode = previousNode
            previousNode = currentNode
            currentNode = nextNode
            nextNode = nextNode.nextNode
        
        
linkedList = LinkedList()
linkedList.remove(3)
linkedList.delete(1)
linkedList.reverse_linkedlist()
print("LL8:")
linkedList.traverse()
linkedList.insert_at_position(2, 15)
print("LL:")
linkedList.traverse()
linkedList.insert_start(4)
print("LL6:")
linkedList.traverse()
linkedList.reverse_linkedlist()
print("LL8:")
linkedList.traverse()



# linkedList.delete(1)
# print("LL7:")
# linkedList.traverse()
# linkedList.insert_start(5)
# linkedList.insert_start(8)
# print("LL1:")
# linkedList.traverse()
# linkedList.insert_end(9)
# print("LL2:")
# linkedList.traverse()
# linkedList.remove(2)
# print("LL3:")
# linkedList.traverse()
# print("Middle Element:", end = ' ')
# print(linkedList.get_middle_element())
# linkedList.reverse_linkedlist()
# print("LL8:")
# linkedList.traverse()



#linkedList.insert_at_position(5, 15)
# print("LL4:")
# linkedList.traverse()
# linkedList.delete(1)
# print("LL5:")
# linkedList.traverse()



    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    




