//sum of first n numbers: iterative

int sum(int n)
{
    int i, s = 0;

    for(i = 1; i<=n; i++)
    {
        s = s+i;
    }
    return s;
}

int main()
{
    int x;
    printf("calling sum");
    x = sum(5);
    printf("%d", x);
    

    return 0;
}

//sum of first n numbers: Recursive

int fact(int n)
{
    if (n<=1)
    {
        return 1;
    }
    
    int f=1;
    for(int i = 2; i<=n; i++)
    {
        f=f*i;
    }
    return f;
}

int main()
{
    int x;
    printf("calling fact");
    x = fact(5);
    printf("%d", x);
    

    return 0;
}

//power optimised: recursive

#include <iostream>

using namespace std;

int pow(int m, int n)
{
    if(n==0)
        return 1;
    
    if(n%2==0)
        return pow(m*m, n/2);
    
    else
        return m*pow(m*m, n/2);
}

int main()
{
    int x;
    x = pow(3,4);
    cout<<x;

    return 0;
}

//fibonacci series: Iterative

#include <iostream>

using namespace std;

int fib(int n)
{
    int a=0, b=1, sum;
    if(n<=1)
        return n;

    for(int i=2; i<n; i++)
    {
        sum= a + b;
        a=b;
        b=sum;
    }
    
    return sum;
}

int main()
{
    int z;
    z=fib(5);
    cout<<z;
    
    return 0;
}

//fibonacci series: Recursion

#include <iostream>

using namespace std;

int fib(int n)
{
    if(n<=1)
        return n;
    
    return fib(n-1) + fib(n-2);
}

int main()
{
    int z;
    z=fib(5);
    cout<<z;
    
    return 0;
}

//fibonacci series: Recursion with Memoization

#include <iostream>

using namespace std;

int F[10] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

int fib(int n)
{
    if(n<=1)
    {
        F[n]=n;
        return n;
    }
    
    if(F[n-1]==-1)
    {
        F[n-1]=fib(n-1);
    }
    
    if(F[n-2]==-1)
    {
        F[n-2]=fib(n-2);
    }

//combination formula: using Factorial

int fact(int n)
{
    if (n<=1)
    {
        return 1;
    }
    
    int f=1;
    for(int i = 2; i<=n; i++)
    {
        f=f*i;
    }
    return f;
}

//Combination formula: using recursion and pascal formula

#include <iostream>

using namespace std;

int comb(int n, int r)
{
    if(r==0 || n==r)
        return 1;
        
    return comb(n-1,r) + comb(n-1, r-1);
}

int main()
{
    int z;
    z=comb(4,2);
    cout<<z;
    
    return 0;
}

